{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Device Native Integration Overview","text":"<p>Welcome to the documentation for the Device Native SDK integration. Here you will find all of the various ways to integrate the Device Native SDK into your application. Device Native SDK is intended to be integrated with Android launcher apps that have system-level access.</p>"},{"location":"#integrate-the-sdk-required","title":"Integrate the SDK (required)","text":"<p>This is the general SDK integration guide that is required for all implementations of Device Native.</p> <ul> <li>General SDK Integration - shows how to integrate the Device Native SDK into your Android launcher</li> </ul>"},{"location":"#organic-ads-integrations","title":"Organic + Ads Integrations","text":"<p>These documents are for developers who intend to use both organic results and advertisements from Device Native.</p> <ul> <li>Organic &amp; Ad Recommendations - shows how to integrate organic results and ads into recommendation sections of your launcher, such as suggested or recently-used apps, or suggested deep links.</li> <li>Search for Organic &amp; Ads - shows how to integrate organic results and ads into search results of your launcher</li> </ul>"},{"location":"#ads-only-integrations","title":"Ads Only Integrations","text":"<p>These documents are for developers who only intend to use the advertisements from Device Native. No organic results are returned through this method.</p> <ul> <li>Ad Recommendations - shows how to integrate ads into recommendation sections of your launcher, such as suggested or recently-used apps.</li> <li>Search Ads - shows how to integrate ads into search results of your launcher.</li> </ul>"},{"location":"#need-help","title":"Need Help?","text":"<p>Please email help@devicenative.com for assistance or questions about the process.</p>"},{"location":"integrate-sdk/","title":"Basic SDK Integration Steps","text":"<p>These are the required steps to integrate the Device Native SDK into your Android launcher app. The SDK is intended to be integrated with Android launcher apps that have system-level access.</p>"},{"location":"integrate-sdk/#1-create-an-account-and-get-a-device-key","title":"1. Create an Account and Get a Device Key","text":"<p>First, create an account at DeviceNative. After registration, obtain your unique device key from the Settings Page, which you'll use in your application to initialize the SDK.</p>"},{"location":"integrate-sdk/#2-add-aar-dependency","title":"2. Add AAR Dependency","text":"<p>The DeviceNativeAds SDK is distributed as an AAR file. Follow the instructions below to install it.</p>"},{"location":"integrate-sdk/#21-download-the-aar-file","title":"2.1. Download the AAR File","text":"<p>You can find the latest AAR hosted here: https://dna-hosting.s3.amazonaws.com/public/com.devicenative.dna-v1.0.0.aar</p>"},{"location":"integrate-sdk/#22-place-the-aar-file-in-your-project","title":"2.2 Place the AAR File in your Project","text":"<p>Place the DeviceNativeAds SDK in the <code>libs</code> folder of your Android project. If you don't have a <code>libs</code> folder, create one. It should be placed in the same folder as your <code>src</code> folder like so:</p> <pre><code>project-folder/src/main/java/com/example/project/MainActivity.java\nproject-folder/libs/com.devicenative.dna-v`latest-version`.aar\n</code></pre>"},{"location":"integrate-sdk/#23-add-the-aar-dependency","title":"2.3 Add the AAR Dependency","text":"<p>Add the following dependency to your app's <code>build.gradle</code> file:</p> <pre><code>dependencies {\n    implementation files('libs/com.devicenative.dna-v`latest-version`.aar')\n}\n</code></pre> <p>or some Gradle versions:</p> <pre><code>dependencies {\n    implementation(files('libs/com.devicenative.dna-v`latest-version`.aar'))\n}\n</code></pre> <p>Replace <code>latest-version</code> with the current version of the SDK.</p>"},{"location":"integrate-sdk/#3-register-the-data-orchestrator-service","title":"3. Register the Data Orchestrator Service","text":"<p>In your AndroidManifest.xml, register the DNADataOrchestrator service:</p> <pre><code>&lt;service android:name=\"com.devicenative.dna.DNADataOrchestrator\" /&gt;\n</code></pre>"},{"location":"integrate-sdk/#4-add-required-permissions","title":"4. Add Required Permissions","text":"<p>Make sure to include the following permissions in your AndroidManifest.xml:</p> <pre><code>&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n&lt;uses-permission android:name=\"android.permission.QUERY_ALL_PACKAGES\"/&gt;\n&lt;uses-permission android:name=\"android.permission.PACKAGE_USAGE_STATS\"/&gt;\n</code></pre>"},{"location":"integrate-sdk/#5-notification-listener-service-optional-but-recommended","title":"5. Notification Listener Service (Optional but Recommended)","text":"<p>If you want to collect notifications for ad creative, you must have a Notification Listener registered like the example below.</p> <p>No action needed here, but just remember the name of this class for later.</p> <pre><code>&lt;service android:name=\".notification.NotificationListener\"\n         android:enabled=\"true\"\n         android:exported=\"true\"\n         android:permission=\"android.permission.BIND_NOTIFICATION_LISTENER_SERVICE\"&gt;\n    &lt;intent-filter&gt;\n        &lt;action android:name=\"android.service.notification.NotificationListenerService\" /&gt;\n    &lt;/intent-filter&gt;\n&lt;/service&gt;\n</code></pre>"},{"location":"integrate-sdk/#6-initialize-the-sdk","title":"6. Initialize the SDK","text":"<p>Initialize the SDK in your Application class's <code>onCreate</code> method:</p> <pre><code>@Override\npublic void onCreate() {\n    super.onCreate();\n\n    DeviceNativeAds dna = DeviceNativeAds.getInstance(this);\n    dna.init(\"YOUR_DEVICE_KEY\");\n\n    // any other code you have\n}\n</code></pre> <p>Replace <code>YOUR_DEVICE_KEY</code> with the key obtained in step 1.</p>"},{"location":"integrate-sdk/#7-clean-up-resources","title":"7. Clean Up Resources","text":"<p>In the Application class's <code>onTerminate</code> method, clean up SDK resources:</p> <pre><code>@Override\npublic void onTerminate() {\n    super.onTerminate();\n\n    DeviceNativeAds dna = DeviceNativeAds.getInstance(this);\n    dna.destroy();\n\n    // any other code you have\n}\n</code></pre>"},{"location":"integrate-sdk/#8-process-notifications-optional-but-recommended","title":"8. Process Notifications (Optional but Recommended)","text":"<p>Device Native can use the recent notification for an app as its creative, creating personalized experiences that drive high conversions. It's strongly recommended that you add the notification listener.</p> <p>Open your notficiation listener class that you noticed in Step 5: <pre><code>// This is your class\npublic class NotificationListener extends NotificationListenerService {\n</code></pre></p> <p>Find the listener service method that handles new notifications, and call the appropriate Device Native code as shown below: <pre><code>@Override\npublic void onNotificationPosted(StatusBarNotification sbn) {\n\n    DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\n    dna.onNotificationPosted(sbn);\n\n    // your other handling code\n}\n</code></pre></p>"},{"location":"integrate-sdk/#need-help","title":"Need Help?","text":"<p>Please email help@devicenative.com for assistance or questions about the process.</p>"},{"location":"rec-ads/","title":"Ad Recommendation Integration Steps","text":"<p>The instructions below will guide you on how to integrate the DNA SDK to power ads-only experiences in your launcher app.</p>"},{"location":"rec-ads/#1-retrieve-advertisements-for-recommendations","title":"1. Retrieve Advertisements for Recommendations","text":"<p>To retrieve an advertisement for immediate display, use the following code. </p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\nList&lt;DNAResultItem&gt; adUnits = dna.getAdsForDisplay(1);\n</code></pre> <p>Note:</p> <ul> <li>That you can adjust the number of ads to be returned by passing a number to the getAdsForDisplay method.</li> <li>This method return an ad in milliseconds, so it's safe to run on the main thread. </li> <li>This will automatically fire an impression immediately if the impressionUrl is populated for each ad. You MUST therefore show all of the ads to the user.</li> <li>These are ordered by relevance, so the first ad will be the most relevant.</li> </ul>"},{"location":"rec-ads/#key-fields-of-dnaresultitem-class","title":"Key Fields of DNAResultItem Class","text":"<ul> <li><code>id</code>: Unique identifier for the ad. Just a UUID for reference if you need</li> <li><code>packageName</code>: The package name of the advertiser's app</li> <li><code>isInstalled</code>: A convenient boolean indicating whether the advertiser's app is installed, derived from package manager</li> <li><code>appName</code>: The name of the advertiser's app</li> <li><code>title</code>: The ad creative title to be shown to the user</li> <li><code>description</code>: The ad creative description to be shown to the user. Can be null!</li> <li><code>iconUrl</code>: The ad creative icon URL to be shown to the user. Can be null!</li> <li><code>clickUrl</code>: The click URL of the ad unit. This will automatically be fired by the SDK when using the click and route method.</li> <li><code>impressionUrl</code>: The impression URL of the ad unit. This will automatically be fired by the SDK when requesting an ad for display.</li> </ul>"},{"location":"rec-ads/#2-loading-the-advertisers-icon","title":"2. Loading The Advertiser's Icon","text":""},{"location":"rec-ads/#case-when-isinstalled-is-true","title":"Case when isInstalled is true","text":"<p>When the app is installed, we recommend just retrieving the icon from the package manager for speed and simplicity.</p> <pre><code>if (adUnit.isInstalled) {\n    // load the icon from the package manager\n    Drawable icon = getPackageManager().getApplicationIcon(adUnit.packageName);\n}\n</code></pre>"},{"location":"rec-ads/#case-when-isinstalled-is-false-load-the-icon-from-the-iconurl","title":"Case when isInstalled is false - load the icon from the iconUrl","text":"<p>When the app is not installed, we have provided a convenient method to load the icon from the iconUrl. You can also retrieve the iconUrl from the ad unit object and handle this yourself if you prefer.</p>"},{"location":"rec-ads/#synchronously","title":"Synchronously","text":"<p>To be called on a background thread.</p> <pre><code>if (!adUnit.isInstalled) {\n    // load the icon from the iconUrl\n    Drawable icon = adUnit.loadCreativeDrawable();\n    // set the image on your UI\n    imageView.setImageDrawable(icon);\n}\n</code></pre>"},{"location":"rec-ads/#asynchrously","title":"Asynchrously","text":"<p>Can be called on the main thread.</p> <pre><code>if (!adUnit.isInstalled) {\n    // load the icon from the iconUrl\n    adUnit.loadCreativeDrawableAsync(new ImageCallback() {\n    @Override\n    public void onImageLoaded(Drawable icon) {\n        // Run on UI thread if updating UI components\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                // set the image on your UI\n                imageView.setImageDrawable(image);\n            }\n        });\n    }\n\n    @Override\n    public void onError(String error) {\n        // Log the error, show a default icon, etc\n    }\n});\n}\n</code></pre>"},{"location":"rec-ads/#3-handle-user-click-interaction","title":"3. Handle User Click Interaction","text":"<p>When a user clicks on the ad, use the following code to handle the routing and receive notifications of status.</p> <p>It executes on a separate thread to ensure the click handling URL properly tracks before the user is sent to the destination, and loading could take a second, so it's recommended to show a loading indicator until the callback is fired. Fine to pass null to the clickHandler callback if you don't need to.</p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\ndna.fireClickAndRoute(adUnit, new DeviceNativeClickHandler() {\n    /**\n     * This method is called when the ad click routing process is completed, which means the user was\n     * sent to their destination, or it failed to route for soem reason.\n     * @param didRoute A boolean indicating whether the routing was successful.\n     */\n    public void onAdClickRouterCompleted(boolean didRoute) {\n        // stop showing a loading bar, or handle routing yourself if didRoute is false\n    }\n\n    /**\n     * This method is called when there is a failure in the ad click process. Implement this method to\n     * define what should happen when there is a failure in the ad click process.\n     * @param errorCode An integer representing the error code of the failure.\n     * @param errorMessage A string representing the error message of the failure.\n     */\n    public void onFailure(int errorCode, String errorMessage) {\n        // log the fail, stop showing loading bar, etc\n    }\n});\n</code></pre>"},{"location":"rec-ads/#need-help","title":"Need Help?","text":"<p>Please email help@devicenative.com for assistance or questions about the process.</p>"},{"location":"rec-organic/","title":"Recommendation Integration Steps","text":"<p>The instructions below will guide you on how to integrate the DNA SDK to power ads-only experiences in your launcher app.</p>"},{"location":"rec-organic/#1-retrieve-results-for-app-suggestions","title":"1. Retrieve Results for App Suggestions","text":"<p>To retrieve suggested apps for immediate display, use the following code. </p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\nList&lt;DNAResultItem&gt; appResults = dna.getOrganicAppSuggestions(5);\n</code></pre> <p>Note:</p> <ul> <li>That you can adjust the number of results to be returned by passing a number to the getOrganicAppSuggestions method. The example shows 5.</li> <li>This method return an results in milliseconds, so it's safe to run on the main thread. </li> <li>Ads will be mixed into the app results</li> <li>This will automatically fire an impression immediately if the impressionUrl is populated for each ad. You MUST therefore show all of the ads to the user.</li> <li>These are ordered by relevance, so the first ad will be the most relevant.</li> </ul>"},{"location":"rec-organic/#key-fields-of-dnaresultitem-class","title":"Key Fields of DNAResultItem Class","text":"<ul> <li><code>id</code>: Unique identifier for the ad. Just a UUID for reference if you need</li> <li><code>resultType</code> : The type of result. Will be <code>DNAResultItem.TYPE_AD</code> for ads.<ul> <li><code>DNAResultItem.TYPE_APP</code>: For organic app results,</li> <li><code>DNAResultItem.TYPE_AD</code>: For advertisements</li> <li><code>DNAResultItem.TYPE_SHORTCUT</code>: For shortcuts and deep links (only returned for getOrganicLinkSuggestions)</li> <li><code>DNAResultItem.TYPE_NOTIFICATION</code>: For notificiations (only returned for getOrganicLinkSuggestions)</li> </ul> </li> <li><code>packageName</code>: The package name of the advertiser's app</li> <li><code>isInstalled</code>: A convenient boolean indicating whether the advertiser's app is installed, derived from package manager</li> <li><code>appName</code>: The name of the advertiser's app</li> <li><code>title</code>: The ad creative title to be shown to the user</li> <li><code>description</code>: The ad creative description to be shown to the user. Can be null!</li> <li><code>iconUrl</code>: The ad creative icon URL to be shown to the user. Can be null!</li> <li><code>clickUrl</code>: The click URL of the ad unit. This will automatically be fired by the SDK when using the click and route method.</li> <li><code>impressionUrl</code>: The impression URL of the ad unit. This will automatically be fired by the SDK when requesting an ad for display.</li> </ul>"},{"location":"rec-organic/#example-implementation","title":"Example Implementation","text":"<p>Here's an example iteration through the app results to show an example implementation:</p> <pre><code>List&lt;DNAResultItem&gt; results = DeviceNativeAds.getInstance(this).getOrganicAppSuggestions(5);\nfor (DNAResultItem result : results) {\n    View itemView = getLayoutInflater().inflate(R.layout.app_view, section, false);\n\n    ImageView itemIcon = itemView.findViewById(R.id.item_icon);\n    TextView itemTitle = itemView.findViewById(R.id.item_title);\n\n    if (result.resultType.equals(DNAResultItem.TYPE_AD)) {\n        // load the icon from the iconUrl\n        Drawable icon = result.loadCreativeDrawable();\n        itemIcon.setImageDrawable(icon);\n    } else if (result.resultType.equals(DNAResultItem.TYPE_APP) &amp;&amp; result.isInstalled) {\n        // load the icon from the package manager\n        Drawable icon = getPackageManager().getApplicationIcon(result.packageName);\n        itemIcon.setImageDrawable(icon);\n    }\n\n    itemTitle.setText(result.title);\n\n    itemView.setOnClickListener(view -&gt; {\n        // Show some loading bar while the click is being processed\n        DeviceNativeAds.getInstance(this).fireClickAndRoute(result, new DeviceNativeClickHandler() {\n            @Override\n            public void onAdClickRouterCompleted(boolean didRoute) {\n                // stop showing a loading bar, or handle routing yourself if didRoute is false\n            }\n\n            @Override\n            public void onFailure(int errorCode, String errorMessage) {\n                // Log the error\n            }\n        });\n    });\n\n    recommendationSection.addView(itemView);\n}\n</code></pre>"},{"location":"rec-organic/#2-retrieve-results-for-suggested-app-links","title":"2. Retrieve Results for Suggested App Links","text":"<p>To retrieve suggested deep links and notifications for immediate display, use the following code. </p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\nList&lt;DNAResultItem&gt; linkResults = dna.getOrganicLinkSuggestions(3);\n</code></pre> <p>Note:</p> <ul> <li>That you can adjust the number of results to be returned by passing a number to the getOrganicLinkSuggestions method. The example shows 3.</li> <li>This method return an results in milliseconds, so it's safe to run on the main thread. </li> <li>Ads will be mixed into the link results</li> <li>This will automatically fire an impression immediately if the impressionUrl is populated for each ad. You MUST therefore show all of the ads to the user.</li> <li>These are ordered by relevance, so the first result will be the most relevant.</li> </ul>"},{"location":"rec-organic/#example-implementation_1","title":"Example Implementation","text":"<p>Here's an example iteration through the deep link results to show an example implementation:</p> <pre><code>List&lt;DNAResultItem&gt; results = DeviceNativeAds.getInstance(this).getOrganicLinkSuggestions(3);\nfor (DNAResultItem resultItem : results) {\n    View itemView = getLayoutInflater().inflate(R.layout.result_view, section, false);\n\n    ImageView itemIcon = itemView.findViewById(R.id.item_icon);\n    TextView itemTitle = itemView.findViewById(R.id.item_title);\n    TextView itemDescription = itemView.findViewById(R.id.item_description);\n\n    if (resultItem.resultType.equals(DNAResultItem.TYPE_AD) || resultItem.resultType.equals(DNAResultItem.TYPE_SHORTCUT)) {\n        resultItem.loadCreativeDrawableAsync(this, new DNAResultItem.ImageCallback() {\n            @Override\n            public void onImageLoaded(Drawable icon) {\n                new Thread(() -&gt; {\n                    runOnUiThread(() -&gt; {\n                        if (icon == null) {\n                            try {\n                                Drawable backupIcon = getPackageManager().getApplicationIcon(resultItem.packageName);\n                                itemIcon.setImageDrawable(backupIcon);\n                            } catch (Exception e) {\n                                Log.e(\"YourActivity\", \"Error loading app icon: \" + e.getMessage());\n                            }\n                        } else {\n                            itemIcon.setImageDrawable(icon);\n                        }\n                    });\n                }).start();\n            }\n\n            @Override\n            public void onError(String message) {\n                try {\n                    Drawable icon = getPackageManager().getApplicationIcon(resultItem.packageName);\n                    itemIcon.setImageDrawable(icon);\n                } catch (Exception e) {\n                    Log.e(\"YourActivity\", \"Error loading app icon: \" + e.getMessage());\n                }\n            }\n        });\n    } else {\n        try {\n            Drawable icon = getPackageManager().getApplicationIcon(resultItem.packageName);\n            itemIcon.setImageDrawable(icon);\n        } catch (Exception e) {\n            Log.e(\"YourActivity\", \"Error loading app icon: \" + e.getMessage());\n        }\n    }\n\n    itemTitle.setText(resultItem.title);\n    String description = resultItem.description;\n    if (resultItem.resultType.equals(DNAResultItem.TYPE_AD)) {\n        if (description != null &amp;&amp; !description.isEmpty()) {\n            description = description.concat(\" - Ad\");\n        } else {\n            description = \"Promoted\";\n        }\n    }\n    if (description == null || description.isEmpty()) {\n        itemDescription.setVisibility(View.GONE);\n    } else {\n        itemDescription.setText(description);\n    }\n\n    itemView.setOnClickListener(view -&gt; {\n        // Show some loading bar while the click is being processed\n        DeviceNativeAds.getInstance(this).fireClickAndRoute(resultItem, new DeviceNativeClickHandler() {\n            @Override\n            public void onAdClickRouterCompleted(boolean didRoute) {\n                // stop showing a loading bar, or handle routing yourself if didRoute is false\n            }\n\n            @Override\n            public void onFailure(int errorCode, String errorMessage) {\n                // Log the error\n            }\n        });\n    });\n\n    linksSection.addView(itemView);\n}\n</code></pre>"},{"location":"rec-organic/#3-loading-the-icons","title":"3. Loading The Icons","text":""},{"location":"rec-organic/#case-when-isinstalled-is-true","title":"Case when isInstalled is true","text":"<p>When the app is installed, we recommend just retrieving the icon from the package manager for speed and simplicity.</p> <pre><code>if (resultItem.isInstalled) {\n    // load the icon from the package manager\n    Drawable icon = getPackageManager().getApplicationIcon(resultItem.packageName);\n}\n</code></pre>"},{"location":"rec-organic/#case-when-isinstalled-is-false-load-the-icon-from-the-iconurl","title":"Case when isInstalled is false - load the icon from the iconUrl","text":"<p>When the app is not installed, we have provided a convenient method to load the icon from the iconUrl. You can also retrieve the iconUrl from the ad unit object and handle this yourself if you prefer.</p>"},{"location":"rec-organic/#synchronously","title":"Synchronously","text":"<p>To be called on a background thread.</p> <pre><code>if (!resultItem.isInstalled) {\n    // load the icon from the iconUrl\n    Drawable icon = resultItem.loadCreativeDrawable();\n    // set the image on your UI\n    imageView.setImageDrawable(icon);\n}\n</code></pre>"},{"location":"rec-organic/#asynchrously","title":"Asynchrously","text":"<p>Can be called on the main thread.</p> <pre><code>if (!resultItem.isInstalled) {\n    // load the icon from the iconUrl\n    resultItem.loadCreativeDrawableAsync(new ImageCallback() {\n    @Override\n    public void onImageLoaded(Drawable icon) {\n        // Run on UI thread if updating UI components\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                // set the image on your UI\n                imageView.setImageDrawable(image);\n            }\n        });\n    }\n\n    @Override\n    public void onError(String error) {\n        // Log the error, show a default icon, etc\n    }\n});\n}\n</code></pre>"},{"location":"rec-organic/#4-handle-user-click-interaction","title":"4. Handle User Click Interaction","text":"<p>When a user clicks on the ad, use the following code to handle the routing and receive notifications of status.</p> <p>It executes on a separate thread to ensure the click handling URL properly tracks before the user is sent to the destination, and loading could take a second, so it's recommended to show a loading indicator until the callback is fired. Fine to pass null to the clickHandler callback if you don't need to.</p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\ndna.fireClickAndRoute(adUnit, new DeviceNativeClickHandler() {\n    /**\n     * This method is called when the ad click routing process is completed, which means the user was\n     * sent to their destination, or it failed to route for soem reason.\n     * @param didRoute A boolean indicating whether the routing was successful.\n     */\n    public void onAdClickRouterCompleted(boolean didRoute) {\n        // stop showing a loading bar, or handle routing yourself if didRoute is false\n    }\n\n    /**\n     * This method is called when there is a failure in the ad click process. Implement this method to\n     * define what should happen when there is a failure in the ad click process.\n     * @param errorCode An integer representing the error code of the failure.\n     * @param errorMessage A string representing the error message of the failure.\n     */\n    public void onFailure(int errorCode, String errorMessage) {\n        // log the fail, stop showing loading bar, etc\n    }\n});\n</code></pre>"},{"location":"rec-organic/#need-help","title":"Need Help?","text":"<p>Please email help@devicenative.com for assistance or questions about the process.</p>"},{"location":"search-ads/","title":"Search Ads Integration Steps","text":"<p>The instructions below will guide you on how to integrate the DNA SDK to power ads-only experiences in your launcher app.</p>"},{"location":"search-ads/#1-retrieve-advertisements-for-search","title":"1. Retrieve Advertisements for Search","text":"<p>To retrieve an advertisement for search, use the following code.</p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\nList&lt;DNAResultItem&gt; adUnits = dna.getAdsForSearch(query);\n</code></pre> <p>Note:</p> <ul> <li>There is no need to debounce this call, as we have some simple logic to handle that.</li> <li>This method return an ad in milliseconds, so it's safe to run on the main thread. </li> <li>This will automatically fire an impression immediately if the impressionUrl is populated for each ad. You MUST therefore show all of the ads to the user.</li> </ul>"},{"location":"search-ads/#2-placing-result-items-in-search","title":"2. Placing Result Items in Search","text":"<p>We recommend that you place the ad units for apps that are currently installed in the first position of the search result list. You may even decide to remove your organic results for the same package names from your list, so there are no duplicate results.</p> <p>For the ad units for apps that are not installed, we recommend that you place the ad units for apps that are not installed in the last position of your search result list.</p> <pre><code>for (DNAResultItem adUnit : adUnits) {\n    if (adUnit.isInstalled) {\n        // place the ad unit in the first position of the search result list\n        // maybe remove the organic results for the same package names (adUnit.packageName)\n    } else {\n        // place the ad unit in the last position of the search result list\n    }\n}\n</code></pre>"},{"location":"search-ads/#key-fields-of-dnaresultitem-class","title":"Key Fields of DNAResultItem Class","text":"<ul> <li><code>id</code>: Unique identifier for the ad. Just a UUID for reference if you need</li> <li><code>packageName</code>: The package name of the advertiser's app</li> <li><code>isInstalled</code>: A convenient boolean indicating whether the advertiser's app is installed, derived from package manager</li> <li><code>appName</code>: The name of the advertiser's app</li> <li><code>title</code>: The ad creative title to be shown to the user</li> <li><code>description</code>: The ad creative description to be shown to the user. Can be null!</li> <li><code>iconUrl</code>: The ad creative icon URL to be shown to the user. Can be null!</li> <li><code>clickUrl</code>: The click URL of the ad unit. This will automatically be fired by the SDK when using the click and route method.</li> <li><code>impressionUrl</code>: The impression URL of the ad unit. This will automatically be fired by the SDK when requesting an ad for display.</li> </ul>"},{"location":"search-ads/#3-loading-the-advertisers-icon","title":"3. Loading The Advertiser's Icon","text":""},{"location":"search-ads/#case-when-isinstalled-is-true","title":"Case when isInstalled is true","text":"<p>When the app is installed, we recommend just retrieving the icon from the package manager for speed and simplicity.</p> <pre><code>if (adUnit.isInstalled) {\n    // load the icon from the package manager\n    Drawable icon = getPackageManager().getApplicationIcon(adUnit.packageName);\n}\n</code></pre>"},{"location":"search-ads/#case-when-isinstalled-is-false-load-the-icon-from-the-iconurl","title":"Case when isInstalled is false - load the icon from the iconUrl","text":"<p>When the app is not installed, we have provided a convenient method to load the icon from the iconUrl. You can also retrieve the iconUrl from the ad unit object and handle this yourself if you prefer.</p>"},{"location":"search-ads/#synchronously","title":"Synchronously","text":"<p>To be called on a background thread.</p> <pre><code>if (!adUnit.isInstalled) {\n    // load the icon from the iconUrl\n    Drawable icon = adUnit.loadCreativeDrawable();\n    // set the image on your UI\n    imageView.setImageDrawable(icon);\n}\n</code></pre>"},{"location":"search-ads/#asynchrously","title":"Asynchrously","text":"<p>Can be called on the main thread.</p> <pre><code>if (!adUnit.isInstalled) {\n    // load the icon from the iconUrl\n    adUnit.loadCreativeDrawableAsync(new ImageCallback() {\n    @Override\n    public void onImageLoaded(Drawable icon) {\n        // Run on UI thread if updating UI components\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                // set the image on your UI\n                imageView.setImageDrawable(image);\n            }\n        });\n    }\n\n    @Override\n    public void onError(String error) {\n        // Log the error, show a default icon, etc\n    }\n});\n}\n</code></pre>"},{"location":"search-ads/#4-handle-user-click-interaction","title":"4. Handle User Click Interaction","text":"<p>When a user clicks on the ad, use the following code to handle the routing and receive notifications of status.</p> <p>It executes on a separate thread to ensure the click handling URL properly tracks before the user is sent to the destination, and loading could take a second, so it's recommended to show a loading indicator until the callback is fired. Fine to pass null to the clickHandler callback if you don't need to.</p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\ndna.fireClickAndRoute(adUnit, new DeviceNativeClickHandler() {\n    /**\n     * This method is called when the ad click routing process is completed, which means the user was\n     * sent to their destination, or it failed to route for soem reason.\n     * @param didRoute A boolean indicating whether the routing was successful.\n     */\n    public void onAdClickRouterCompleted(boolean didRoute) {\n        // stop showing a loading bar, or handle routing yourself if didRoute is false\n    }\n\n    /**\n     * This method is called when there is a failure in the ad click process. Implement this method to\n     * define what should happen when there is a failure in the ad click process.\n     * @param errorCode An integer representing the error code of the failure.\n     * @param errorMessage A string representing the error message of the failure.\n     */\n    public void onFailure(int errorCode, String errorMessage) {\n        // log the fail, stop showing loading bar, etc\n    }\n});\n</code></pre>"},{"location":"search-ads/#need-help","title":"Need Help?","text":"<p>Please email help@devicenative.com for assistance or questions about the process.</p>"},{"location":"search-organic/","title":"Search Integration Steps","text":"<p>The instructions below will guide you on how to integrate the DNA SDK to power ads-only experiences in your launcher app.</p>"},{"location":"search-organic/#1-retrieve-results-for-search-results","title":"1. Retrieve Results for Search Results","text":"<p>To retrieve suggested apps for immediate display, use the following code. </p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\nList&lt;DNAResultItem&gt; searchResults = dna.getOrganicResultsForSearch(query);\n</code></pre> <p>Note:</p> <ul> <li>There is no need to debounce this call, as we have some simple logic to handle that.</li> <li>Results will be ranked by relevance, so the first result will be the most relevant.</li> <li>Ads will be mixed into the link results</li> <li>This method return an results in milliseconds, so it's safe to run on the main thread. </li> <li>This will automatically fire an impression immediately if the impressionUrl is populated for each ad. You MUST therefore show all of the ads to the user.</li> </ul>"},{"location":"search-organic/#key-fields-of-dnaresultitem-class","title":"Key Fields of DNAResultItem Class","text":"<ul> <li><code>id</code>: Unique identifier for the ad. Just a UUID for reference if you need</li> <li><code>resultType</code> : The type of result. Will be <code>DNAResultItem.TYPE_AD</code> for ads.<ul> <li><code>DNAResultItem.TYPE_APP</code>: For organic app results,</li> <li><code>DNAResultItem.TYPE_AD</code>: For advertisements</li> <li><code>DNAResultItem.TYPE_SHORTCUT</code>: For shortcuts and deep links (only returned for getOrganicLinkSuggestions)</li> <li><code>DNAResultItem.TYPE_NOTIFICATION</code>: For notificiations (only returned for getOrganicLinkSuggestions)</li> </ul> </li> <li><code>packageName</code>: The package name of the advertiser's app</li> <li><code>isInstalled</code>: A convenient boolean indicating whether the advertiser's app is installed, derived from package manager</li> <li><code>appName</code>: The name of the advertiser's app</li> <li><code>title</code>: The ad creative title to be shown to the user</li> <li><code>description</code>: The ad creative description to be shown to the user. Can be null!</li> <li><code>iconUrl</code>: The ad creative icon URL to be shown to the user. Can be null!</li> <li><code>clickUrl</code>: The click URL of the ad unit. This will automatically be fired by the SDK when using the click and route method.</li> <li><code>impressionUrl</code>: The impression URL of the ad unit. This will automatically be fired by the SDK when requesting an ad for display.</li> </ul>"},{"location":"search-organic/#example-implementation","title":"Example Implementation","text":"<p>Here's an example iteration through the deep link results to show an example implementation:</p> <pre><code>List&lt;DNAResultItem&gt; results = DeviceNativeAds.getInstance(this).getOrganicLinkSuggestions(3);\nfor (DNAResultItem resultItem : results) {\n    View itemView = getLayoutInflater().inflate(R.layout.result_view, section, false);\n\n    ImageView itemIcon = itemView.findViewById(R.id.item_icon);\n    TextView itemTitle = itemView.findViewById(R.id.item_title);\n    TextView itemDescription = itemView.findViewById(R.id.item_description);\n\n    // Please indent the link results for best visual appearance\n    if (!resultItem.resultType.equals(DNAResultItem.TYPE_APP) &amp;&amp; !resultItem.resultType.equals(DNAResultItem.TYPE_AD)) {\n        insertLeftPadding(itemIcon, 16);\n    }\n\n    // Load the icon in the case where it is not just the app icon\n    if (resultItem.resultType.equals(DNAResultItem.TYPE_AD) || resultItem.resultType.equals(DNAResultItem.TYPE_SHORTCUT)) {\n        resultItem.loadCreativeDrawableAsync(this, new DNAResultItem.ImageCallback() {\n            @Override\n            public void onImageLoaded(Drawable icon) {\n                new Thread(() -&gt; {\n                    runOnUiThread(() -&gt; {\n                        if (icon == null) {\n                            try {\n                                Drawable backupIcon = getPackageManager().getApplicationIcon(resultItem.packageName);\n                                itemIcon.setImageDrawable(backupIcon);\n                            } catch (Exception e) {\n                                Log.e(\"YourActivity\", \"Error loading app icon: \" + e.getMessage());\n                            }\n                        } else {\n                            itemIcon.setImageDrawable(icon);\n                        }\n                    });\n                }).start();\n            }\n\n            @Override\n            public void onError(String message) {\n                try {\n                    Drawable icon = getPackageManager().getApplicationIcon(resultItem.packageName);\n                    itemIcon.setImageDrawable(icon);\n                } catch (Exception e) {\n                    Log.e(\"YourActivity\", \"Error loading app icon: \" + e.getMessage());\n                }\n            }\n        });\n    } else {\n        try {\n            Drawable icon = getPackageManager().getApplicationIcon(resultItem.packageName);\n            itemIcon.setImageDrawable(icon);\n        } catch (Exception e) {\n            Log.e(\"YourActivity\", \"Error loading app icon: \" + e.getMessage());\n        }\n    }\n\n    itemTitle.setText(resultItem.title);\n    String description = resultItem.description;\n    if (resultItem.resultType.equals(DNAResultItem.TYPE_AD)) {\n        if (description != null &amp;&amp; !description.isEmpty()) {\n            description = description.concat(\" - Ad\");\n        } else {\n            description = \"Promoted\";\n        }\n    }\n    if (description == null || description.isEmpty()) {\n        itemDescription.setVisibility(View.GONE);\n    } else {\n        itemDescription.setText(description);\n    }\n\n    itemView.setOnClickListener(view -&gt; {\n        // Show some loading bar while the click is being processed\n        DeviceNativeAds.getInstance(this).fireClickAndRoute(resultItem, new DeviceNativeClickHandler() {\n            @Override\n            public void onAdClickRouterCompleted(boolean didRoute) {\n                // stop showing a loading bar, or handle routing yourself if didRoute is false\n            }\n\n            @Override\n            public void onFailure(int errorCode, String errorMessage) {\n                // Log the error\n            }\n        });\n    });\n\n    linksSection.addView(itemView);\n}\n</code></pre> <p>Here's an example implementation that inserts the left padding.</p> <pre><code>private void insertLeftPadding(View view, int padding) {\n    // Convert dp to pixels\n    final float scale = getResources().getDisplayMetrics().density;\n    int leftPaddingInPx = (int) (padding * scale + 0.5f);\n\n    // Get existing paddings for top, right, and bottom to preserve them.\n    int topPadding = view.getPaddingTop();\n    int rightPadding = view.getPaddingRight();\n    int bottomPadding = view.getPaddingBottom();\n\n    // Set the new padding. Only the left padding is changed.\n    view.setPadding(leftPaddingInPx, topPadding, rightPadding, bottomPadding);\n}\n</code></pre>"},{"location":"search-organic/#2-loading-the-icons","title":"2. Loading The Icons","text":""},{"location":"search-organic/#case-when-isinstalled-is-true","title":"Case when isInstalled is true","text":"<p>When the app is installed, we recommend just retrieving the icon from the package manager for speed and simplicity.</p> <pre><code>if (resultItem.isInstalled) {\n    // load the icon from the package manager\n    Drawable icon = getPackageManager().getApplicationIcon(resultItem.packageName);\n}\n</code></pre>"},{"location":"search-organic/#case-when-isinstalled-is-false-load-the-icon-from-the-iconurl","title":"Case when isInstalled is false - load the icon from the iconUrl","text":"<p>When the app is not installed, we have provided a convenient method to load the icon from the iconUrl. You can also retrieve the iconUrl from the ad unit object and handle this yourself if you prefer.</p>"},{"location":"search-organic/#synchronously","title":"Synchronously","text":"<p>To be called on a background thread.</p> <pre><code>if (!resultItem.isInstalled) {\n    // load the icon from the iconUrl\n    Drawable icon = resultItem.loadCreativeDrawable();\n    // set the image on your UI\n    imageView.setImageDrawable(icon);\n}\n</code></pre>"},{"location":"search-organic/#asynchrously","title":"Asynchrously","text":"<p>Can be called on the main thread.</p> <pre><code>if (!resultItem.isInstalled) {\n    // load the icon from the iconUrl\n    resultItem.loadCreativeDrawableAsync(new ImageCallback() {\n    @Override\n    public void onImageLoaded(Drawable icon) {\n        // Run on UI thread if updating UI components\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                // set the image on your UI\n                imageView.setImageDrawable(image);\n            }\n        });\n    }\n\n    @Override\n    public void onError(String error) {\n        // Log the error, show a default icon, etc\n    }\n});\n}\n</code></pre>"},{"location":"search-organic/#3-handle-user-click-interaction","title":"3. Handle User Click Interaction","text":"<p>When a user clicks on the ad, use the following code to handle the routing and receive notifications of status.</p> <p>It executes on a separate thread to ensure the click handling URL properly tracks before the user is sent to the destination, and loading could take a second, so it's recommended to show a loading indicator until the callback is fired. Fine to pass null to the clickHandler callback if you don't need to.</p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\ndna.fireClickAndRoute(adUnit, new DeviceNativeClickHandler() {\n    /**\n     * This method is called when the ad click routing process is completed, which means the user was\n     * sent to their destination, or it failed to route for soem reason.\n     * @param didRoute A boolean indicating whether the routing was successful.\n     */\n    public void onAdClickRouterCompleted(boolean didRoute) {\n        // stop showing a loading bar, or handle routing yourself if didRoute is false\n    }\n\n    /**\n     * This method is called when there is a failure in the ad click process. Implement this method to\n     * define what should happen when there is a failure in the ad click process.\n     * @param errorCode An integer representing the error code of the failure.\n     * @param errorMessage A string representing the error message of the failure.\n     */\n    public void onFailure(int errorCode, String errorMessage) {\n        // log the fail, stop showing loading bar, etc\n    }\n});\n</code></pre>"},{"location":"search-organic/#need-help","title":"Need Help?","text":"<p>Please email help@devicenative.com for assistance or questions about the process.</p>"}]}